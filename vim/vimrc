" Disable Vi compatibility
set nocompatible

set backspace=indent,eol,start "backspace in insert
set history=1000
set mouse=a "use mouse

" syntax
syntax enable

" filetype on
filetype on 

"""
" indentation settings
"""
set autoindent 
set tabstop=4 "softtabstop=4
set shiftwidth=4 "shiftround
" set smartindent smarttab
" set expandtab

" function! SetupPython()
"     " Here, you can have the final say on what is set.  So
"     " fixup any settings you don't like.
"     setlocal softtabstop=4
"     setlocal tabstop=4
"     setlocal shiftwidth=4
" endfunction
" command! -bar SetupPython call SetupPython()

" autocmd FileType python setlocal autoindent shiftwidth=4 tabstop=4 "softtabstop=4

"""
" Visuals
"""
colorscheme wal
set display=truncate

" Search/Tab-completion is recurssive from working directory
set path+=**

" Tab completion settings
set wildmenu
set wildmode=list:longest,full

" Always include status line
set laststatus=2

" Include file name in status line
" set statusline+=%f%l%c
" Create tags file in working directory
command! MakeTags !ctags -R .

" netrw settings
let g:netrw_banner=0 " disable banner
let g:netrw_liststyle=3 "tree view
autocmd FileType netrw setl bufhidden=delete " Per default, netrw leaves unmodified buffers open. This autocommand deletes netrw's buffer once it's hidden (using ':q', for example)

autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

" ignore cases except uppercase
set ignorecase smartcase

" <Leader> set to spacebar
let mapleader = " "

" Spell-check set to <Leader>s
nmap <Leader>s ;setlocal spell! spelllang=en_us<CR>

" Edit vimrc
nmap <Leader>ev ;tabe $MYVIMRC<cr>

" Enable search highlighting
set hlsearch incsearch
" Toggle search highlight
function! HighlightToggle()
	if (&hlsearch == 1)
		set nohlsearch
	else
		set hlsearch
	endif
endfunc

nnoremap <Leader>h :call HighlightToggle()<cr>

"""
" Windows
"""
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
set splitbelow
set splitright

" Switch : <-> ;
nnoremap ; :
nnoremap : ;

" Switch j/k and gj/gk
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

"""
" backup file settings
"""
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp
set undodir=~/.vim/un

"""
" Line number settings
"""
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE guifg=DarkGrey guibg=NONE
highlight CursorLineNr term=bold ctermfg=Blue

set relativenumber
set number
highlight cursorline cterm=none

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    highlight CursorLineNr ctermfg=Yellow
    set cursorline
  else
    highlight CursorLineNr ctermfg=Blue
    set nocursorline
    set relativenumber
  endif
endfunc

nnoremap <Leader>n :call NumberToggle()<cr>
autocmd InsertEnter * call NumberToggle()
autocmd InsertLeave * call NumberToggle()

" Yank to end of line
nnoremap Y y$

" When started as "evim", evim.vim will already have done these settings.
" if v:progname =~? "evim"
"   finish
" endif

" Get the defaults that most users want.
" source $VIMRUNTIME/defaults.vim

" if has("vms")
"   set nobackup		" do not keep a backup file, use versions instead
" else
"   set backup		" keep a backup file (restore to previous version)
"   if has('persistent_undo')
"     set undofile	" keep an undo file (undo changes after closing)
"   endif
" endif
set undolevels=1000 undofile undodir=~/.vim/un

" Only do this part when compiled with support for autocommands.
" if has("autocmd")

"   " Put these in an autocmd group, so that we can delete them easily.
"   augroup vimrcEx
"   au!

"   " For all text files set 'textwidth' to 78 characters.
"   " autocmd FileType text setlocal textwidth=78

"   augroup END

" else

"   set autoindent		" always set autoindenting on

" endif " has("autocmd")

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
if has('syntax') && has('eval')
  packadd matchit
endif

"""
" timeout settings
"""
set timeout " Do time out on mappings and others
set timeoutlen=2000 " Wait {num} ms before timing out a mapping

" When youâ€™re pressing Escape to leave insert mode in the terminal, it will by
" default take a second or another keystroke to leave insert mode completely
" and update the statusline. This fixes that. I got this from:
" https://powerline.readthedocs.org/en/latest/tipstricks.html#vim
" if !has('gui_running')
"     set ttimeoutlen=10
"     augroup FastEscape
"         autocmd!
"         au InsertEnter * set timeoutlen=0
"         au InsertLeave * set timeoutlen=2000
"     augroup END
" endif

"""
" autogroups
"""
augroup autosourcing
	autocmd!
	autocmd BufWritePost .vimrc source /home/tim/.config/vim/vimrc
augroup END
augroup filetype_rmarkdown
    autocmd!
    autocmd filetype rmd map <F5> ;!echo<space>"require(rmarkdown);<space>render('<c-r>%', 'pdf_document')"<space>\|<space>R<space>--vanilla<enter>
    autocmd filetype rmd map <F6> ;!echo<space>"require(rmarkdown);<space>render('<c-r>%', 'html_document')"<space>\|<space>R<space>--vanilla<enter>
augroup END
augroup filetype_tex
	autocmd!
	autocmd filetype tex map <F5> ;!xelatex<space><c-r>%<Enter>
augroup END
